for (c1 in x) {
for (c2 in x) {
combx <- c(combx, paste(c1, c2, sep = ",", collapse = ""))
}
}
combx
combx2 <- character()
for (c1 in x) {
for (c2 in x) {
if (c1 == c2) next
combx2 <- c(combx2, paste(c1, c2, sep = ",", collapse = ""))
}
}
combx2
if (c1 != c2) {
combx2 <- c(combx2, paste(c1, c2, sep = ",", collapse = ""))
}
combn(c("a", "b", "c"), 2)
expand.grid(n = c(1, 2, 3), x = c("a", "b"))
x <- 0
while (x <= 5) {
cat(x, " ", sep = "")
x <- x + 1
}
x <- 0
while (TRUE) {
x <- x + 1
if (x == 4) break
else if (x == 2) next
else cat(x, '\n')
}
res <- dbSendQuery(con, "SELECT * FROM table1 WHERE type = 1")
while (!dbHasCompleted(res)) {
chunk <- dbFetch(res, 10000)
process(chunk)
}
x <- 0
repeat {
x <- x + 1
if (x == 4) break
else if (x == 2) next
else cat(x, '\n')
}
"Hello"
str1 <- "Hello"
str1
for (i in 1:3) {
"Hello"
}
test1 <- function(x) {
"Hello"
x
}
test1("World")
test2 <- function(x) {
"Hello"
}
test2("World")
print(str1)
for (i in 1:3) {
print(str1)
}
test3 <- function(x) {
print("Hello")
x
}
test3("World")
cat("Hello")
name <- "Ken"
language <- "R"
cat("Hello,", name, "- a user of", language)
cat("Hello, ", name, ", a user of ", language, ".")
cat("Hello, ", name, ", a user of ", language, ".", sep = "")
message("Hello, ", name, ", a user of ", language, ".")
for (i in 1:3) {
cat(letters[[i]])
}
for (i in 1:3) {
message(letters[[i]])
}
for (i in 1:3) {
cat(letters[[i]], "\n", sep = "")
}
paste("Hello", "world")
paste("Hello", "world", sep = "-")
paste0("Hello", "world")
value1 <- cat("Hello", "world")
value1
paste(c("A", "B"), c("C", "D"))
paste(c("A", "B"), c("C", "D"),collapse = ", ")
result <- paste(c("A", "B"), c("C", "D"), collapse = "\n")
result
cat(result)
tolower("Hello")
toupper("Hello")
calc <- function(type, x, y) {
type <- tolower(type)
if (type == "add") {
x + y
} else if (type == "times") {
x * y
} else {
stop("Not supported type of command")
}
}
c(calc("add", 2, 3), calc("Add", 2, 3), calc("TIMES", 2, 3))
toupper(c("Hello", "world"))
nchar("Hello")
nchar(c("Hello", "R", "User"))
store_student <- function(name, age) {
stopifnot(length(name) == 1, nchar(name) >= 2,
is.numeric(age), age > 0)
# store the information in the database
}
store_student("James", 20)
store_student("P", 23)
store_student("  P", 23)
store_student2 <- function(name, age) {
stopifnot(length(name) == 1, nchar(trimws(name)) >= 2,
is.numeric(age), age > 0)
# store the information in the database
}
store_student2("  P", 23)
trimws(c("  Hello", "World   "), which = "left")
dates <- c("Jan 3", "Feb 10", "Nov 15")
substr(dates, 1, 3)
substr(dates, 5, nchar(dates))
get_month_day <- function(x) {
months <- vapply(substr(tolower(x), 1, 3), function(md) {
switch(md, jan = 1, feb = 2, mar = 3, apr = 4,
may = 5, jun = 6, jul = 7, aug = 8,
sep = 9, oct = 10, nov = 11, dec = 12)
}, numeric(1), USE.NAMES = FALSE)
days <- as.numeric(substr(x, 5, nchar(x)))
data.frame(month = months, day = days)
}
get_month_day(dates)
substr(dates, 1, 3) <- c("Feb", "Dec", "Mar")
dates
strsplit("a,bb,ccc", split = ",")
students <- strsplit(c("Tony, 26, Physics", "James, 25, Economics"), split = ", ")
students
students_matrix <- do.call(rbind, students)
colnames(students_matrix) <- c("name", "age", "major")
students_matrix
students_df <- data.frame(students_matrix, stringsAsFactors = FALSE)
students_df$age <- as.numeric(students_df$age)
students_df
strsplit(c("hello", "world"), split = "")
cat(paste("#", 1:nrow(students_df), ", name: ", students_df$name,
", age: ", students_df$age, ", major: ", students_df$major, sep = ""), sep = "\n")
cat(sprintf("#%d, name: %s, age: %d, major: %s",
1:nrow(students_df), students_df$name, students_df$age, students_df$major), sep = "\n")
sprintf("The length of the line is approximately %.1fmm", 12.295)
sprintf("The ratio is %d%%", 10)
sprintf("%s, %d years old, majors in %s and loves %s.",
"James", 25, "Physics", "Physics")
# install.packages("pystr")
library(pystr)
pystr_format("{1}, {2} years old, majors in {3} and loves {3}.",
"James", 25, "Physics", "Physics")
pystr_format("{name}, {age} years old, majors in {major} and loves {major}.",
name = "James", age = 25, major = "Physics")
Sys.Date()
Sys.time()
current_date <- Sys.Date()
as.numeric(current_date)
current_time <- Sys.time()
as.numeric(current_time)
as.Date(1000, "1970-01-01")
my_date <- as.Date("2016-02-10")
my_date
my_date + 3
my_date + 80
my_date - 65
date1 <- as.Date("2014-09-28")
date2 <- as.Date("2015-10-20")
date2 - date1
as.numeric(date2 - date1)
my_time <- as.POSIXlt("2016-02-10 10:25:31")
my_time
my_time + 10
my_time + 12345
my_time - 1234567
as.Date("2015.07.25")
as.Date("2015.07.25", format = "%Y.%m.%d")
as.POSIXlt("7/25/2015 09:30:25", format = "%m/%d/%Y %H:%M:%S")
strptime("7/25/2015 09:30:25", "%m/%d/%Y %H:%M:%S")
as.Date(c("2015-05-01", "2016-02-12"))
as.Date("2015-01-01") + 0:2
strptime("7/25/2015 09:30:25", "%m/%d/%Y %H:%M:%S") + 1:3
as.Date("20150610", format = "%Y%m%d")
strptime("20150610093215", "%Y%m%d%H%M%S")
datetimes <- data.frame(
date = c(20150601, 20150603),
time = c(92325, 150621))
dt_text <- paste0(datetimes$date, datetimes$time)
dt_text
strptime(dt_text, "%Y%m%d%H%M%S")
dt_text2 <- paste0(datetimes$date, sprintf("%06d", datetimes$time))
dt_text2
strptime(dt_text2, "%Y%m%d%H%M%S")
my_date
date_text <- as.character(my_date)
date_text
date_text + 1
as.character(my_date, format = "%Y.%m.%d")
format(my_date, "%Y.%m.%d")
my_time
format(my_time, "date: %Y-%m-%d, time: %H:%M:%S")
read.csv("data/messages.txt", header = FALSE)
fruits <- readLines("data/fruits.txt")
fruits
matches <- grep("^\\w+:\\s\\d+$", fruits)
matches
fruits[matches]
grep("\\d", c("abc", "a12", "123", "1"))
grep("^\\d$", c("abc", "a12", "123", "1"))
library(stringr)
matches <- str_match(fruits, "^(\\w+):\\s(\\d+)$")
matches
# transform to data frame
fruits_df <- data.frame(na.omit(matches[, -1]), stringsAsFactors = FALSE)
# add a header
colnames(fruits_df) <- c("fruit","quantity")
# convert type of quantity from character to integer
fruits_df$quantity <- as.integer(fruits_df$quantity)
fruits_df
telephone <- readLines("data/telephone.txt")
telephone
telephone[grep("^\\d{3}-\\d{5}$", telephone)]
telephone[grep("^\\d{4}-\\d{4}$", telephone)]
telephone[!grepl("^\\d{3}-\\d{5}$", telephone) & !grepl("^\\d{4}-\\d{4}$", telephone)]
messages <- readLines("data/messages.txt")
pattern <- "^(\\d+-\\d+-\\d+),(\\d+:\\d+:\\d+),(\\w+),(\\w+),\\s*(.+)$"
matches <- str_match(messages, pattern)
messages_df <- data.frame(matches[, -1])
colnames(messages_df) <- c("Date", "Time", "Sender", "Receiver", "Message")
messages_df
add <- function(x, y) {
x + y
}
addn <- function(y) {
function(x) {
x + y
}
}
add1 <- addn(1)
add2 <- addn(2)
add1(10)
add2(10)
add1
environment(add1)$y
environment(add2)$y
color_line <- function(col) {
function(...) {
plot(..., type = "l", lty = 1, col = col)
}
}
red_line <- color_line("red")
red_line(rnorm(30), main = "Red line plot")
plot(rnorm(30), type = "l", lty = 1, col = "red",
main = "Red line plot")
nloglik <- function(x) {
n <- length(x)
function(mean, sd) {
log(2 * pi) * n / 2 + log(sd ^ 2) * n / 2 + sum((x - mean) ^ 2) / (2 * sd ^ 2)
}
}
data <- rnorm(10000, 1, 2)
fit <- stats4::mle(nloglik(data),
start = list(mean = 0, sd = 1), method = "L-BFGS-B",
lower = c(-5, 0.01), upper = c(5, 10))
fit@coef
(fit@coef - c(1, 2)) / c(1, 2)
hist(data, freq = FALSE, ylim = c(0, 0.25))
curve(dnorm(x, 1, 2), add = TRUE, col = rgb(1, 0, 0, 0.5), lwd = 6)
curve(dnorm(x, fit@coef[["mean"]], fit@coef[["sd"]]),
add = TRUE, col = "blue", lwd = 2)
f1 <- function() {
cat("[f1] executing in ")
print(environment())
cat("[f1] enclosed by ")
print(parent.env(environment()))
cat("[f1] calling from ")
print(parent.frame())
}
f2 <- function() {
cat("[f2] executing in ")
print(environment())
cat("[f2] enclosed by ")
print(parent.env(environment()))
cat("[f2] calling from ")
print(parent.frame())
p <- f1
p()
}
f1()
f2()
f1 <- function(x, y) {
if (x > y) {
x + y
} else {
x - y
}
}
f2 <- function(x, y) {
op <- if (x > y) `+` else `-`
op(x, y)
}
add <- function(x, y, z) {
x + y + z
}
product <- function(x, y, z) {
x * y * z
}
combine <- function(f, x, y, z) {
f(x, y, z)
}
combine(add, 3, 4, 5)
combine(product, 3, 4, 5)
result <- list()
for (i in seq_along(x)) {
result[[i]] <- f(x[[i]])
}
result
lapply(x, f)
lapply <- function(x, f, ...) {
result <- list()
for (i in seq_along(x)) {
result[[i]] <- f(x[i], ...)
}
}
lapply(1:3, `+`, 3)
list(1 + 3, 2 + 3, 3 + 3)
lapply(1:3, addn(3))
sapply(1:3, addn(3))
vapply(1:3, addn(3), numeric(1))
result <- list()
for (i in seq_along(x)) {
# heavy computing task
result[[i]] <- f(x[[i]])
}
result
result <- lapply(x, f)
result <- parallel::mclapply(x, f)
iris[iris$Sepal.Length > quantile(iris$Sepal.Length, 0.8) &
iris$Sepal.Width > quantile(iris$Sepal.Width, 0.8) &
iris$Petal.Length > quantile(iris$Petal.Length, 0.8) &
iris$Petal.Width > quantile(iris$Petal.Width, 0.8), ]
subset(iris,
Sepal.Length > quantile(Sepal.Length, 0.8) &
Sepal.Width > quantile(Sepal.Width, 0.8) &
Petal.Length > quantile(Petal.Length, 0.8) &
Petal.Width > quantile(Petal.Width, 0.8))
iris[Sepal.Length > quantile(Sepal.Length, 0.8) &
Sepal.Width > quantile(Sepal.Width, 0.8) &
Petal.Length > quantile(Petal.Length, 0.8) &
Petal.Width > quantile(Petal.Width, 0.8), ]
subset(iris,
Sepal.Length > quantile(Sepal.Length, 0.8) &
Sepal.Width > quantile(Sepal.Width, 0.8) &
Petal.Length > quantile(Petal.Length, 0.8) &
Petal.Width > quantile(Petal.Width, 0.8),
select = c(Sepal.Length, Petal.Length, Species))
rnorm(5)
call1 <- quote(rnorm(5))
call1
typeof(call1)
class(call1)
name1 <- quote(rnorm)
name1
typeof(name1)
class(name1)
quote(pvar)
quote(xfun(a = 1:n))
as.list(call1)
call1[[1]]
typeof(call1[[1]])
class(call1[[1]])
call1[[2]]
typeof(call1[[2]])
class(call1[[2]])
num1 <- 100
num2 <- quote(100)
num1
num2
identical(num1, num2)
call2 <- quote(c("a", "b"))
call2
as.list(call2)
str(as.list(call2))
call3 <- quote(1 + 1)
call3
is.call(call3)
str(as.list(call3))
call4 <- quote(sqrt(1 + x ^ 2))
call4
pryr::call_tree(call4)
call1
call1[[1]] <- quote(runif)
call1
call1[[3]] <- -1
names(call1)[[3]] <- "min"
call1
fun1 <- function(x) {
quote(x)
}
fun1(rnorm(5))
fun2 <- function(x) {
substitute(x)
}
fun2(rnorm(5))
substitute(x + y + x ^ 2, list(x = 1))
substitute(f(x + f(y)), list(f = quote(sin)))
call1 <- quote(rnorm(5, mean = 3))
call1
call2 <- call("rnorm", 5,  mean = 3)
call2
call3 <- as.call(list(quote(rnorm), 5, mean = 3))
call3
identical(call1, call2)
identical(call2, call3)
sin(1)
call1 <- quote(sin(1))
call1
eval(call1)
call2 <- quote(sin(x))
call2
eval(call2)
sin(x)
eval(call2, list(x = 1))
e1 <- new.env()
e1$x <- 1
eval(call2, e1)
call3 <- quote(x ^ 2 + y ^ 2)
call3
eval(call3)
eval(call3, list(x = 2))
eval(call3, list(x = 2, y = 3))
e1 <- new.env()
e1$x <- 2
eval(call3, e1)
e2 <- new.env(parent = e1)
e2$y <- 3
eval(call3, e2)
pryr::call_tree(call3)
e3 <- new.env()
e3$y <- 3
eval(call3, list(x = 2), e3)
eval(quote(z <- x + y + 1), list(x = 1), e3)
e3$z
eval(quote(z <- y + 1), e3)
e3$z
eval(quote(1 + 1), list(`+` = `-`))
x <- 1:10
x[3:(length(x) - 5)]
qs <- function(x, range) {
range <- substitute(range)
selector <- eval(range, list(. = length(x)))
x[selector]
}
qs(x, 3:(. - 5))
qs(x, . - 1)
trim_margin <- function(x, n) {
qs(x, (n + 1):(. - n - 1))
}
trim_margin(x, 3)
eval
qs <- function(x, range) {
range <- substitute(range)
selector <- eval(range, list(. = length(x)), parent.frame())
x[selector]
}
trim_margin(x, 3)
formula1 <- z ~ x ^ 2 + y ^ 2
typeof(formula1)
class(formula1)
str(as.list(formula1))
is.call(formula1)
length(formula1)
formula1[[2]]
formula1[[3]]
environment(formula1)
formula2 <- ~ x + y
str(as.list(formula2))
length(formula2)
formula2[[2]]
qs2 <- function(x, range) {
selector <- if (inherits(range, "formula")) {
eval(range[[2]], list(. = length(x)), environment(range))
} else range
x[selector]
}
qs2(1:10, ~ 3:(. - 2))
qs2(1:10, 3)
trim_margin2 <- function(x, n) {
qs2(x, ~ (n + 1):(. - n - 1))
}
trim_margin2(x, 3)
subset2 <- function(x, subset = TRUE, select = TRUE) {
enclos <- parent.frame()
subset <- substitute(subset)
select <- substitute(select)
row_selector <- eval(subset, x, enclos)
col_envir <- as.list(seq_along(x))
names(col_envir) <- colnames(x)
col_selector <- eval(select, col_envir, enclos)
x[row_selector, col_selector]
}
subset2(mtcars, mpg >= quantile(mpg, 0.9), c(mpg, cyl, qsec))
subset2(mtcars, mpg >= quantile(mpg, 0.9), mpg:drat)
